# me - this DAT
# scriptOp - the OP which is cooking
import os
import sys

sys.path.append(os.path.join('venv', 'Lib', 'site-packages'))

import cv2
import numpy
import open3d

astra_camera_intrinsics = open3d.camera.PinholeCameraIntrinsic(width=640, height=480, fx=585, fy=495, cx=320, cy=240)


# called whenever custom pulse parameter is pushed
def onPulse(par):
    return


def onCook(scriptOp):
    image_in = scriptOp.inputs[0].numpyArray(delayed=False)
    if image_in is not None:
        astra_camera_intrinsics.set_intrinsics(
            width=image_in.shape[1],
            height=image_in.shape[0],
            fx=scriptOp.par.Fx.val,
            fy=scriptOp.par.Fy.val,
            cx=scriptOp.par.Cx.val * image_in.shape[1],
            cy=scriptOp.par.Cy.val * image_in.shape[0],
        )

        image_out = get_pointcloud(image_in)

        scriptOp.copyNumpyArray(image_out)


def get_pointcloud(depth_image):
    image = cv2.cvtColor(depth_image, cv2.COLOR_RGBA2GRAY)
    open3d_image = open3d.geometry.Image(image)
    pointcloud = open3d.geometry.PointCloud.create_from_depth_image(
        depth=open3d_image,
        intrinsic=astra_camera_intrinsics,
        depth_scale=1000,
        depth_trunc=1000,
        project_valid_depth_only=False,
    )
    point_image = numpy.asarray(pointcloud.points)
    point_image[numpy.isnan(point_image)] = 0
    point_image = point_image.reshape(image.shape[0], image.shape[1], 3)
    point_image = point_image.astype(numpy.float32)

    return point_image


def onSetupParameters(scriptOp):
    """Auto-generated by Component Editor"""
    # manual changes to anything other than parJSON will be	# destroyed by Comp Editor unless doc string above is	# changed

    TDJSON = op.TDModules.mod.TDJSON
    parJSON = """
    {
        "Custom": {
            "Fx": {
                "name": "Fx",
                "label": "Fx",
                "page": "Custom",
                "style": "Float",
                "size": 1,
                "default": 585.0,
                "enable": true,
                "startSection": false,
                "readOnly": false,
                "enableExpr": null,
                "min": 0.0,
                "max": 1.0,
                "normMin": 1.0,
                "normMax": 1000.0,
                "clampMin": false,
                "clampMax": false
            },
            "Fy": {
                "name": "Fy",
                "label": "Fy",
                "page": "Custom",
                "style": "Float",
                "size": 1,
                "default": 495.0,
                "enable": true,
                "startSection": false,
                "readOnly": false,
                "enableExpr": null,
                "min": 0.0,
                "max": 1.0,
                "normMin": 1.0,
                "normMax": 1000.0,
                "clampMin": false,
                "clampMax": false
            },
            "Cx": {
                "name": "Cx",
                "label": "Cx",
                "page": "Custom",
                "style": "Float",
                "size": 1,
                "default": 0.5,
                "enable": true,
                "startSection": false,
                "readOnly": false,
                "enableExpr": null,
                "min": 0.0,
                "max": 1.0,
                "normMin": 0.0,
                "normMax": 1.0,
                "clampMin": false,
                "clampMax": false
            },
            "Cy": {
                "name": "Cy",
                "label": "Cy",
                "page": "Custom",
                "style": "Float",
                "size": 1,
                "default": 0.5,
                "enable": true,
                "startSection": false,
                "readOnly": false,
                "enableExpr": null,
                "min": -2.0,
                "max": 2.0,
                "normMin": 0.0,
                "normMax": 1.0,
                "clampMin": true,
                "clampMax": true
            }
        }
    }
    """
    parData = TDJSON.textToJSON(parJSON)
    TDJSON.addParametersFromJSONOp(scriptOp, parData, destroyOthers=True)
